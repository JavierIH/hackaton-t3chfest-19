// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file plantPubSubMain.cpp
 * This file acts as a main entry point to the application.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include "plantPublisher.h"
#include "plantSubscriber.h"


#include <fastrtps/Domain.h>
#include <string>
#include <tgbot/tgbot.h>




using namespace eprosima;
using namespace eprosima::fastrtps;

using namespace TgBot;



int main(int argc, char** argv)
{


	TgBot::Bot bot("736807638:AAGO_kWyiVIbe6-uKYwYOtMFeV4YNtIUgtM");




	InlineKeyboardMarkup::Ptr keyboard(new InlineKeyboardMarkup);
	std::vector<InlineKeyboardButton::Ptr> row0;
	InlineKeyboardButton::Ptr checkButton(new InlineKeyboardButton);
	checkButton->text = "check";
	checkButton->callbackData = "check";
	row0.push_back(checkButton);
	keyboard->inlineKeyboard.push_back(row0);








	bot.getEvents().onCommand("start", [&bot, &keyboard](Message::Ptr message) {
           bot.getApi().sendMessage(message->chat->id, "Hi!", false, 0, keyboard);
   });

	bot.getEvents().onAnyMessage([&bot](TgBot::Message::Ptr message) {
		printf("User wrote %s\n", message->text.c_str());
		if (StringTools::startsWith(message->text, "/start")) {
			return;
		}
		bot.getApi().sendMessage(message->chat->id, "Updated: " + message->text);


		std::string type = "operario";
		std::string id = "42";
		std::string location = "bogota";


		std::string json = "{\"type\":\"" + type
			+ "\",\"id\":" + id
			+ ",\"date\":" + std::to_string(std::time(nullptr))
			+ ",\"location\":\"" + location
			+ "\",\"state\":\"" + message->text + "\"}";


		std::string output = "curl --header \"Content-Type: application/json\"   --request POST   --data \'" + json + "\'   http://192.168.5.150:3000/data";
		system(output.c_str());


	});
	try {
		printf("Bot username: %s\n", bot.getApi().getMe()->username.c_str());
		TgBot::TgLongPoll longPoll(bot);
		while (true) {
			printf("Long poll started\n");
			longPoll.start();
		}
	} catch (TgBot::TgException& e) {
		printf("error: %s\n", e.what());
	}

	std::cin.ignore();

	return 0;
}
